// Code generated by generate_examples.go; DO NOT EDIT.
package xtemplate_test

import (
	"fmt"

	"github.com/Eun/xtemplate"
	"github.com/Eun/xtemplate/funcs"
)

func ExampleRegexp_FindAllString() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindAllString "p([a-z]+)ch" "peach punch pinch" -1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [peach punch pinch]
}

func ExampleRegexp_FindAllStringIndex() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindAllStringIndex "p([a-z]+)ch" "peach punch" -1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [[0 5] [6 11]]
}

func ExampleRegexp_FindAllStringSubmatch() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindAllStringSubmatch "a(x*)b" "-ab-" -1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [[ab ]]
}

func ExampleRegexp_FindAllStringSubmatch_second() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindAllStringSubmatch "a(x*)b" "-axxb-ab-" -1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [[axxb xx] [ab ]]
}

func ExampleRegexp_FindAllStringSubmatchIndex() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindAllStringSubmatchIndex "a(x*)b" "-ab-" -1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [[1 3 2 2]]
}

func ExampleRegexp_FindAllStringSubmatchIndex_second() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindAllStringSubmatchIndex "a(x*)b" "-axxb-" -1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [[1 5 2 4]]
}

func ExampleRegexp_FindAllStringSubmatchIndex_third() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindAllStringSubmatchIndex "a(x*)b" "-ab-axb-" -1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [[1 3 2 2] [4 7 5 6]]
}

func ExampleRegexp_FindAllStringSubmatchIndex_fourth() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindAllStringSubmatchIndex "a(x*)b" "-axxb-ab-" -1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [[1 5 2 4] [6 8 7 7]]
}

func ExampleRegexp_FindAllStringSubmatchIndex_fifth() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindAllStringSubmatchIndex "a(x*)b" "-foo-" -1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: []
}

func ExampleRegexp_FindString() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindString "p([a-z]+)ch" "peach punch pinch" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: peach
}

func ExampleRegexp_FindStringIndex() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindStringIndex "p([a-z]+)ch" "peach punch" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [0 5]
}

func ExampleRegexp_FindStringSubmatch() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindStringSubmatch "a(x*)b(y|z)c" "-axxxbyc-" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [axxxbyc xxx y]
}

func ExampleRegexp_FindStringSubmatch_second() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindStringSubmatch "a(x*)b(y|z)c" "-abzc-" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [abzc  z]
}

func ExampleRegexp_FindStringSubmatchIndex() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.FindStringSubmatchIndex "p([a-z]+)ch" "peach" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [0 5 1 3]
}

func ExampleRegexp_MatchString() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.MatchString "p([a-z]+)ch" "peach" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: true
}

func ExampleRegexp_MatchString_second() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.MatchString "p([a-z]+)ch" "apple" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: false
}

func ExampleRegexp_QuoteMeta() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.QuoteMeta "Escaping $5.00?" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: Escaping \$5\.00\?
}

func ExampleRegexp_ReplaceAllLiteralString() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.ReplaceAllLiteralString "a(x*)b" "-ab-axxb-" "T" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: -T-T-
}

func ExampleRegexp_ReplaceAllString() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.ReplaceAllString "a(x*)b" "-ab-axxb-" "${1}W" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: -W-xxW-
}

func ExampleRegexp_Split() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.Split "a" "banana" -1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [b n n ]
}

func ExampleRegexp_Split_second() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.Split "a" "apple" 0 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: []
}

func ExampleRegexp_Split_third() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.Split "a" "grape" 1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [grape]
}

func ExampleRegexp_Split_fourth() {
	s, _ := xtemplate.QuickExecute(
		`{{ regexp.Split "z+" "pizza" 2 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [pi a]
}

