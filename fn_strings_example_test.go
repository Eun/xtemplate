// Code generated by generate_examples.go; DO NOT EDIT.
package xtemplate_test

import (
	"fmt"

	"github.com/Eun/xtemplate"
	"github.com/Eun/xtemplate/funcs"
)

func ExampleStrings_Compare() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Compare "apple" "banana" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: -1
}

func ExampleStrings_Compare_second() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Compare "banana" "apple" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 1
}

func ExampleStrings_Compare_third() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Compare "apple" "apple" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 0
}

func ExampleStrings_Contains() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Contains "hello world" "world" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: true
}

func ExampleStrings_Contains_second() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Contains "hello world" "mars" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: false
}

func ExampleStrings_ContainsAny() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.ContainsAny "hello" "aeiou" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: true
}

func ExampleStrings_ContainsAny_second() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.ContainsAny "rhythm" "aeiou" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: false
}

func ExampleStrings_ContainsRune() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.ContainsRune "hello" 'e' }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: true
}

func ExampleStrings_ContainsRune_second() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.ContainsRune "hello" 'a' }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: false
}

func ExampleStrings_Count() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Count "hello hello" "hello" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 2
}

func ExampleStrings_Count_second() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Count "hello" "l" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 2
}

func ExampleStrings_Count_third() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Count "hello" "" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 6
}

func ExampleStrings_Cut() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Cut "apple,banana" "," }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: {apple banana true}
}

func ExampleStrings_CutPrefix() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.CutPrefix "Hello, World!" "Hello, " }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: {World! true}
}

func ExampleStrings_CutSuffix() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.CutSuffix "Hello, World!" ", World!" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: {Hello true}
}

func ExampleStrings_Equal() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Equal "hello" "hello" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: true
}

func ExampleStrings_EqualFold() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.EqualFold "Go" "go" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: true
}

func ExampleStrings_Fields() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Fields "  hello   world  " }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [hello world]
}

func ExampleStrings_HasPrefix() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.HasPrefix "Hello, World!" "Hello" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: true
}

func ExampleStrings_HasSuffix() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.HasSuffix "Hello, World!" "World!" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: true
}

func ExampleStrings_Index() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Index "hello world" "world" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 6
}

func ExampleStrings_IndexAny() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.IndexAny "hello" "aeiou" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 1
}

func ExampleStrings_IndexByte() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.IndexByte "hello" 'l' }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 2
}

func ExampleStrings_IndexRune() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.IndexRune "hello" 'e' }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 1
}

func ExampleStrings_Join() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Join ( slice.NewStrings "hello" "world" ) " " }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: hello world
}

func ExampleStrings_LastIndex() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.LastIndex "hello hello" "hello" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 6
}

func ExampleStrings_LastIndexAny() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.LastIndexAny "hello" "aeiou" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 4
}

func ExampleStrings_LastIndexByte() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.LastIndexByte "hello" 'l' }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: 3
}

func ExampleStrings_Repeat() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Repeat "ha" 3 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: hahaha
}

func ExampleStrings_Replace() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Replace "hello world hello" "hello" "hi" 1 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: hi world hello
}

func ExampleStrings_ReplaceAll() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.ReplaceAll "hello world hello" "hello" "hi" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: hi world hi
}

func ExampleStrings_Split() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Split "apple,banana,cherry" "," }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [apple banana cherry]
}

func ExampleStrings_SplitAfter() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.SplitAfter "apple,banana,cherry" "," }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [apple, banana, cherry]
}

func ExampleStrings_SplitAfterN() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.SplitAfterN "apple,banana,cherry" "," 2 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [apple, banana,cherry]
}

func ExampleStrings_SplitN() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.SplitN "apple,banana,cherry" "," 2 }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: [apple banana,cherry]
}

func ExampleStrings_ToLower() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.ToLower "TEST" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: test
}

func ExampleStrings_ToTitle() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.ToTitle "hello world" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: HELLO WORLD
}

func ExampleStrings_ToUpper() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.ToUpper "test" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: TEST
}

func ExampleStrings_Trim() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.Trim "¡¡¡Hello, Gophers!!!" "!¡" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: Hello, Gophers
}

func ExampleStrings_TrimLeft() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.TrimLeft "¡¡¡Hello, Gophers!!!" "!¡" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: Hello, Gophers!!!
}

func ExampleStrings_TrimPrefix() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.TrimPrefix "Hello, World!" "Hello, " }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: World!
}

func ExampleStrings_TrimRight() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.TrimRight "¡¡¡Hello, Gophers!!!" "!¡" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: ¡¡¡Hello, Gophers
}

func ExampleStrings_TrimSpace() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.TrimSpace "  \t\n Hello, Gophers \n\t\r\n" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: Hello, Gophers
}

func ExampleStrings_TrimSuffix() {
	s, _ := xtemplate.QuickExecute(
		`{{ strings.TrimSuffix "Hello, World!" ", World!" }}`,
		nil,
		funcs.All,
	)
	fmt.Println(s) // Output: Hello
}

