# this workflow will run on all pushes.
on:
  push:

name: "push"
jobs:
  # run golangci-lint to lint the golang source code.
  # the configuration is at /.golangci.yml.
  linter:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v5.0.0
      -
        name: Install Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      -
        name: Lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: v2.4.0
          # optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

  # use nancy to scan for vulnerabilities.
  vulnerability_scanner:
    name: Vulnerability scanner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5.0.0
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      - name: Configure Git
        run: git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
      - name: nancy
        run: |
          cd ${{ inputs.module }}
          go list -mod=readonly -json -m all | docker run -i sonatypecommunity/nancy:latest sleuth


  check_generation:
    name: Check code generation
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v5.0.0
      -
        name: Install Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      -
        name: Check code generation
        run: |
          go generate ./...
          if [ -n "$(git status --porcelain)" ]; then
            echo "Code generation is out of date. Please run 'go generate ./...' and commit the changes."
            git --no-pager diff
            exit 1
          else
            echo "Code generation is up to date."
          fi

  # run golang test suite and collect their coverage.
  test:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v5.0.0
      -
        name: Install Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      -
        name: Test
        run: go test -v -count=1 -coverprofile="coverage-${{ matrix.platform }}-${{ steps.go-mod-details.outputs.go_version }}.cov" -covermode=atomic ./...
      -
        name: Send coverage
        uses: shogo82148/actions-goveralls@v1.9.0
        with:
          path-to-profile: coverage-${{ matrix.platform }}-${{ steps.go-mod-details.outputs.go_version }}.cov
          flag-name: ${{ matrix.platform }}-${{ steps.go-mod-details.outputs.go_version }}
          parallel: true

  # notifies that all test jobs are finished.
  finish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: shogo82148/actions-goveralls@v1.9.0
        with:
          parallel-finished: true

  # draft your next release notes as pull requests are merged into "master"
  # the configuration is at /.github/release-drafter.yml.
  update_release_draft:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: release-drafter/release-drafter@v6
        if: github.ref_name == github.event.repository.default_branch
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
